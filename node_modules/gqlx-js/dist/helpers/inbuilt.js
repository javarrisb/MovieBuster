"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateHelpers = exports.createGenerationMask = exports.inbuiltFunctionNames = void 0;
const acorn_1 = require("acorn");
const ast_1 = require("./ast");
function produceFrom(input) {
    return (0, acorn_1.parseExpressionAt)(input, 0, { ecmaVersion: 9, preserveParens: true });
}
function insertNewValueAtTop(statements, name, init) {
    (0, ast_1.insertNewValue)(statements, name, init, statements.length);
}
const inbuiltFunctions = {
    either(block) {
        insertNewValueAtTop(block.body, 'either', produceFrom('(x, value) => x === undefined ? value : x'));
    },
    use(block) {
        insertNewValueAtTop(block.body, 'use', produceFrom('(x, cb) => cb(x)'));
    },
    cq(block) {
        const filterKeys = produceFrom('Object.keys(obj).filter(m => obj[m] !== undefined && obj[m] !== null)');
        insertNewValueAtTop(block.body, 'cq', {
            type: 'ArrowFunctionExpression',
            async: false,
            expression: true,
            params: [
                {
                    type: 'Identifier',
                    name: 'url',
                },
                {
                    type: 'Identifier',
                    name: 'obj',
                },
            ],
            body: {
                type: 'BinaryExpression',
                operator: '+',
                left: {
                    type: 'Identifier',
                    name: 'url',
                },
                right: {
                    type: 'ConditionalExpression',
                    test: {
                        type: 'MemberExpression',
                        computed: false,
                        optional: false,
                        object: filterKeys,
                        property: {
                            type: 'Identifier',
                            name: 'length',
                        },
                    },
                    consequent: {
                        type: 'TemplateLiteral',
                        quasis: [
                            {
                                type: 'TemplateElement',
                                tail: false,
                                value: {
                                    cooked: '?',
                                    raw: '?',
                                },
                            },
                            {
                                type: 'TemplateElement',
                                tail: true,
                                value: {
                                    cooked: '',
                                    raw: '',
                                },
                            },
                        ],
                        expressions: [
                            {
                                type: 'CallExpression',
                                callee: {
                                    type: 'MemberExpression',
                                    computed: false,
                                    optional: false,
                                    object: {
                                        type: 'CallExpression',
                                        callee: {
                                            type: 'MemberExpression',
                                            computed: false,
                                            optional: false,
                                            object: filterKeys,
                                            property: {
                                                type: 'Identifier',
                                                name: 'map',
                                            },
                                        },
                                        optional: false,
                                        arguments: [
                                            {
                                                type: 'ArrowFunctionExpression',
                                                async: false,
                                                expression: true,
                                                params: [
                                                    {
                                                        type: 'Identifier',
                                                        name: 'm',
                                                    },
                                                ],
                                                body: {
                                                    type: 'TemplateLiteral',
                                                    quasis: [
                                                        {
                                                            type: 'TemplateElement',
                                                            tail: false,
                                                            value: {
                                                                cooked: '',
                                                                raw: '',
                                                            },
                                                        },
                                                        {
                                                            type: 'TemplateElement',
                                                            tail: false,
                                                            value: {
                                                                cooked: '=',
                                                                raw: '=',
                                                            },
                                                        },
                                                        {
                                                            type: 'TemplateElement',
                                                            tail: true,
                                                            value: {
                                                                cooked: '',
                                                                raw: '',
                                                            },
                                                        },
                                                    ],
                                                    expressions: [
                                                        (0, ast_1.callFunction)('encodeURIComponent', {
                                                            type: 'Identifier',
                                                            name: 'm',
                                                        }),
                                                        (0, ast_1.callFunction)('encodeURIComponent', {
                                                            type: 'MemberExpression',
                                                            computed: true,
                                                            optional: false,
                                                            object: {
                                                                type: 'Identifier',
                                                                name: 'obj',
                                                            },
                                                            property: {
                                                                type: 'Identifier',
                                                                name: 'm',
                                                            },
                                                        }),
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    property: {
                                        type: 'Identifier',
                                        name: 'join',
                                    },
                                },
                                optional: false,
                                arguments: [
                                    {
                                        type: 'Literal',
                                        value: '&',
                                        raw: "'&'",
                                    },
                                ],
                            },
                        ],
                    },
                    alternate: {
                        type: 'Literal',
                        value: '',
                        raw: "''",
                    },
                },
            },
        });
    },
};
exports.inbuiltFunctionNames = Object.keys(inbuiltFunctions);
function createGenerationMask() {
    return exports.inbuiltFunctionNames.reduce((prev, curr) => {
        prev[curr] = false;
        return prev;
    }, {});
}
exports.createGenerationMask = createGenerationMask;
function generateHelpers(generate, block) {
    const names = exports.inbuiltFunctionNames.filter(m => generate[m] === true);
    for (const name of names) {
        const generateHelper = inbuiltFunctions[name];
        generateHelper(block);
    }
}
exports.generateHelpers = generateHelpers;
//# sourceMappingURL=inbuilt.js.map