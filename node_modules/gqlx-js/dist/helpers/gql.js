"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToPureGql = exports.getArguments = exports.getMode = exports.getName = void 0;
function getName(tokens) {
    let hasColon = false;
    let foundRoundClose = false;
    let foundRoundOpen = false;
    for (let i = tokens.length; i--;) {
        if (tokens[i].kind === ':') {
            if (hasColon && !foundRoundClose)
                break;
            hasColon = true;
        }
        else if (tokens[i].kind === ')') {
            foundRoundClose = true;
        }
        else if (tokens[i].kind === '(') {
            if (!foundRoundClose)
                break;
            foundRoundOpen = true;
        }
        else if (tokens[i].kind === 'Name') {
            if (hasColon && foundRoundClose === foundRoundOpen) {
                return tokens[i].value;
            }
        }
    }
    return undefined;
}
exports.getName = getName;
function getMode(tokens, modes, current) {
    const last = tokens.length - 1;
    if (last - 2 >= 0) {
        if (tokens[last].kind === '{') {
            const previous = tokens[last - 1];
            const initial = tokens[last - 2];
            if (initial.kind === 'Name' &&
                initial.value === 'type' &&
                previous.kind === 'Name' &&
                modes.indexOf(previous.value || '') >= 0) {
                return previous.value;
            }
        }
        else if (tokens[last].kind === '}') {
            return undefined;
        }
    }
    return current;
}
exports.getMode = getMode;
function getArguments(ast, typeName, fieldName) {
    const fields = ast.definitions
        .filter(m => m.kind === 'ObjectTypeDefinition' && m.name.value === typeName)
        .map(m => (m.kind === 'ObjectTypeDefinition' && m.fields) || [])[0];
    const args = fields
        .filter(m => m.name.value === fieldName)
        .map(m => m.arguments || [])
        .map(m => m.map(n => n.name.value))[0];
    return args || [];
}
exports.getArguments = getArguments;
function convertToPureGql(source, positions) {
    const fragments = [];
    let previousIndex = 0;
    for (const position of positions) {
        fragments.push(source.substring(previousIndex, position.start));
        previousIndex = position.end;
    }
    fragments.push(source.substring(previousIndex));
    return fragments.join('');
}
exports.convertToPureGql = convertToPureGql;
//# sourceMappingURL=gql.js.map