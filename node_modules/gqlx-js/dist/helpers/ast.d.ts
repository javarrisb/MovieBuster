import { AwaitExpression, CallExpression, Statement, Expression, BlockStatement, Super, ReturnStatement, ExpressionStatement, VariableDeclaration, Property, BinaryExpression, EmptyStatement, TryStatement, WhileStatement, ForStatement, IfStatement, DebuggerStatement, DoWhileStatement, SpreadElement } from 'estree';
export interface ParenthesizedNode {
    type: 'ParenthesizedExpression';
    expression: ExpressionNode;
}
export declare type ExpressionNode = Expression | Super | BlockStatement | IfStatement | WhileStatement | DoWhileStatement | ForStatement | DebuggerStatement | ReturnStatement | EmptyStatement | TryStatement | ExpressionStatement | VariableDeclaration | SpreadElement | ParenthesizedNode | Property;
export declare function mayBeAsync(node: ExpressionNode): boolean;
export declare function wrapInAwait(argument: any): AwaitExpression;
export declare function wrapInLambda(argument: any, statements?: Array<Statement>, async?: boolean): CallExpression;
export declare function callFunction(name: string, argument: Expression): CallExpression;
export declare function isNotIdentifier(name: string): BinaryExpression;
export declare function wrapInPromiseAll(argument: any): CallExpression;
export declare function createVariableDeclaration(name: string, init: Expression): VariableDeclaration;
export declare function insertNewValue(statements: Array<Statement>, name: string, init: Expression, offset?: number): void;
export declare function insertAwaitedValue(statements: Array<Statement>, name: string, argument: Expression, offset?: number): void;
export declare function wrapInFunctionBlock(child: ExpressionNode, name: string, argument: Expression): CallExpression;
