"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const AsyncFunction = Object.getPrototypeOf(async function () { }).constructor;
function createStandardResolver(name, type, field) {
    return (_root, args, context) => {
        const resolve = context.getService(name);
        return resolve(type, field, args);
    };
}
function createSubscriptionResolver(name, type, field) {
    return {
        subscribe: createStandardResolver(name, type, field),
    };
}
function createResolver(name, type, field) {
    switch (type) {
        case 'Subscription':
            return createSubscriptionResolver(name, type, field);
        case 'Query':
        case 'Mutation':
            return createStandardResolver(name, type, field);
        default:
            throw new Error(`Invalid type used. Expected 'Subscription', 'Query', or 'Mutation', but received '${type}'.`);
    }
}
function generate(name, connectors) {
    const models = Object.keys(connectors).reduce((res, type) => {
        const connector = connectors[type];
        res[type] = Object.keys(connector).reduce((con, field) => {
            const source = connector[field];
            const Func = source.indexOf('await ') >= 0 ? AsyncFunction : Function;
            con[field] = new Func('$api', '$data', source);
            return con;
        }, {});
        return res;
    }, {});
    const resolvers = Object.keys(connectors).reduce((res, type) => {
        const connector = connectors[type];
        res[type] = Object.keys(connector).reduce((con, field) => {
            con[field] = createResolver(name, type, field);
            return con;
        }, {});
        return res;
    }, {});
    return {
        resolvers,
        createService(api) {
            return (type, field, data) => {
                const model = models[type];
                const connect = model[field];
                return connect(api, data);
            };
        },
    };
}
exports.generate = generate;
//# sourceMappingURL=generate.js.map