export declare const toyInput = "\n  type Foo {\n    id: ID\n    name: String\n  }\n\n  type Bar {\n    id: ID\n    age: Int\n  }\n\n  type Query {\n    foo: [Foo]\n\n    bar(name: String): Bar {\n      get('api')\n        .map(x => find({ name, ...x }).map(y => y.element))\n        .filter(x => !x)\n        .map(x => `Hello there ${x.y} from ${name}`)\n    }\n\n    qxz(id: ID!, name: String, ages: [Int]): [Bar] {\n      get('api')\n    }\n\n    items(hashes: [String]): [Foo] {\n      (hashes && hashes.length) ?\n        post('api/item', {\n          hashes,\n          content: '',\n        }).items\n      :\n        get('api/item').items\n    }\n  }\n\n  type Mutation {\n    foo(a: String, b: Int): [Int] {\n      post('api/foo', {\n        body: get('api'),\n      })\n    }\n  }\n\n  type Subscription {\n    foo: [Foo] {\n      listen('foo')\n    }\n  }\n";
