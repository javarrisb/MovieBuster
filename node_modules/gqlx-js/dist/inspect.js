"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inspect = void 0;
const utils_1 = require("./utils");
const helpers_1 = require("./helpers");
function positionAt(offset, lines) {
    let sum = 0;
    for (let i = 0; i < lines.length; i++) {
        const len = lines[i];
        if (offset - len <= sum) {
            return {
                col: offset - sum,
                ln: i + 1,
            };
        }
        sum += len + 1;
    }
    return {
        col: lines[lines.length - 1],
        ln: lines.length,
    };
}
function inspect(content) {
    const run = () => {
        const lineLengths = content.split('\n').map(ln => ln.length);
        const resolvers = (0, utils_1.createEmptyResolvers)();
        const positions = (0, utils_1.extractResolvers)(content, resolvers);
        const gql = (0, helpers_1.convertToPureGql)(content, positions);
        const end = {
            col: lineLengths[lineLengths.length - 1],
            ln: lineLengths.length,
        };
        const regions = [
            {
                type: 'gql',
                start: {
                    col: 1,
                    ln: 1,
                },
                end,
            },
        ];
        for (const position of positions) {
            const sp = positionAt(position.start, lineLengths);
            const ep = positionAt(position.end, lineLengths);
            regions[regions.length - 1].end = sp;
            regions.push({
                type: 'js',
                start: sp,
                end: ep,
            }, {
                type: 'gql',
                start: ep,
                end,
            });
        }
        summary.lineLengths = lineLengths;
        summary.regions = regions;
        summary.resolvers = resolvers;
        summary.gql = gql;
    };
    const summary = {
        update(newContent) {
            content = newContent;
            run();
        },
        position(offset) {
            return positionAt(offset, summary.lineLengths);
        },
        completeAt(pos) {
            return [];
        },
        errors: [],
        regions: [],
        lineLengths: [],
        gql: '',
        resolvers: (0, utils_1.createEmptyResolvers)(),
    };
    run();
    return summary;
}
exports.inspect = inspect;
//# sourceMappingURL=inspect.js.map